// <auto-generated />
using System;
using LessonWorld.Data.Concrete.EfCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LessonWorld.Data.Migrations
{
    [DbContext(typeof(LessonWorldContext))]
    partial class LessonWorldContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 473, DateTimeKind.Local).AddTicks(170),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 473, DateTimeKind.Local).AddTicks(204),
                            UserId = "f4bed8c0-18e8-4ca6-802b-28e699fc01fc"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 473, DateTimeKind.Local).AddTicks(210),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 473, DateTimeKind.Local).AddTicks(210),
                            UserId = "d64545e2-8acd-4b2f-adf2-20da519eca19"
                        });
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("LessonId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 473, DateTimeKind.Local).AddTicks(7463),
                            Description = "Spor Dersleri Basketbol,Futbol,Volaybol,Yüzme,Koşu",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 473, DateTimeKind.Local).AddTicks(7469),
                            Name = "Spor",
                            Url = "spor-dersleri"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 473, DateTimeKind.Local).AddTicks(7473),
                            Description = "Sanat Derleri,Heykel Traş,Resim,Mozaik,Seramik,Temel Tasarım",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 473, DateTimeKind.Local).AddTicks(7473),
                            Name = "Sanat",
                            Url = "sanat-dersleri"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 473, DateTimeKind.Local).AddTicks(7475),
                            Description = "Sözel Dersler Türkçe,Tarih,Felsefe,Edebiyat,Dil Anlatım",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 473, DateTimeKind.Local).AddTicks(7476),
                            Name = "Sözel",
                            Url = "sozel-dersleri"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 473, DateTimeKind.Local).AddTicks(7477),
                            Description = "Sayısal Dersler Matematik,Fizik,Kimya Biyoloji,Geometri",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 473, DateTimeKind.Local).AddTicks(7477),
                            Name = "Sayısal",
                            Url = "sayisal-dersleri"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 473, DateTimeKind.Local).AddTicks(7478),
                            Description = "Enstürman Dersleri Gitar,Keman,Saz,Piyano,Saksafon",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 473, DateTimeKind.Local).AddTicks(7479),
                            Name = "Enstürman",
                            Url = "enstürman-dersleri"
                        });
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonTime")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(3966),
                            Description = "Basketbol  alanında gelişim eğitimi",
                            ImageUrl = "basketbol.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(3975),
                            Name = "Basketbol",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 1,
                            Url = "basketbol-1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(3983),
                            Description = "Futbol  alanında gelişim eğitimi",
                            ImageUrl = "futbol.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(3984),
                            Name = "Futbol",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 2,
                            Url = "Futbol-2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(3987),
                            Description = "Voleybol  alanında gelişim eğitimi",
                            ImageUrl = "voleybol.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(3987),
                            Name = "Voleybol",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 1,
                            Url = "voleybol-3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(3989),
                            Description = "Yüzme  alanında gelişim eğitimi",
                            ImageUrl = "yuzme.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(3990),
                            Name = "Yüzme",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 2,
                            Url = "yuzme-4"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(3991),
                            Description = "Koşu alanında gelişim eğitimi",
                            ImageUrl = "kosu.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(3992),
                            Name = "Koşu",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 1,
                            Url = "kosu-5"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(3994),
                            Description = "Heykel Traş  alanında gelişim eğitimi",
                            ImageUrl = "tras.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(3994),
                            Name = "Heykel Traş",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 3,
                            Url = "tras-6"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(3996),
                            Description = "Resim  alanında gelişim eğitimi",
                            ImageUrl = "resim.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(3996),
                            Name = "Resim",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 3,
                            Url = "resim-7"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(3998),
                            Description = "Temel Tasarım  alanında gelişim eğitimi",
                            ImageUrl = "tras.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4005),
                            Name = "Temel Tasarım",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 3,
                            Url = "temel-tasarım-8"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4016),
                            Description = "Mozaik  alanında gelişim eğitimi",
                            ImageUrl = "mozaik.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4016),
                            Name = "Mozaik",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 4,
                            Url = "mozaik-9"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4019),
                            Description = "Seramik  alanında gelişim eğitimi",
                            ImageUrl = "seramik.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4019),
                            Name = "Seramik",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 4,
                            Url = "seramik-10"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4021),
                            Description = "Türkçe  alanında gelişim eğitimi",
                            ImageUrl = "turkce.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4022),
                            Name = "Türkçe",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 5,
                            Url = "turkce-11"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4024),
                            Description = "Edebiyat  alanında gelişim eğitimi",
                            ImageUrl = "edebiyat.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4024),
                            Name = "Edebiyat",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 5,
                            Url = "edebiyat-12"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4027),
                            Description = "Dil Anlatım  alanında gelişim eğitimi",
                            ImageUrl = "dil-anlatim.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4027),
                            Name = "Dil Anlatım",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 5,
                            Url = "dil-analatim-13"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4029),
                            Description = "Tarih alanında gelişim eğitimi",
                            ImageUrl = "tarih.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4030),
                            Name = "Tarih",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 6,
                            Url = "tarih-14"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4031),
                            Description = "Felsefe  alanında gelişim eğitimi",
                            ImageUrl = "felsefe.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4032),
                            Name = "Felsefe",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 6,
                            Url = "felsefe-15"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4034),
                            Description = "Matematik  alanında gelişim eğitimi",
                            ImageUrl = "matematik.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4034),
                            Name = "Matematik",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 7,
                            Url = "matematik-16"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4036),
                            Description = "Geometri  alanında gelişim eğitimi",
                            ImageUrl = "geometri.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4036),
                            Name = "Geometri",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 7,
                            Url = "geometri-17"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4044),
                            Description = "Fizik  alanında gelişim eğitimi",
                            ImageUrl = "fizik.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4044),
                            Name = "Fizik",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 7,
                            Url = "fizik-18"
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4046),
                            Description = "Kimya  alanında gelişim eğitimi",
                            ImageUrl = "kimya.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4047),
                            Name = "Kimya",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 8,
                            Url = "kimya-19"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4049),
                            Description = "Biyoloji  alanında gelişim eğitimi",
                            ImageUrl = "Biyoloji.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4049),
                            Name = "Biyoloji",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 8,
                            Url = "biyoloji-20"
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4052),
                            Description = "Geometri  alanında gelişim eğitimi",
                            ImageUrl = "gitar.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4052),
                            Name = "Gitar",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 9,
                            Url = "gitar-21"
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4056),
                            Description = "Saz  alanında gelişim eğitimi",
                            ImageUrl = "saz.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4056),
                            Name = "Saz",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 9,
                            Url = "saz-22"
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4059),
                            Description = "Keman  alanında gelişim eğitimi",
                            ImageUrl = "keman.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4060),
                            Name = "Keman",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 9,
                            Url = "keman-23"
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4062),
                            Description = "Piyano  alanında gelişim eğitimi",
                            ImageUrl = "piyano.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4063),
                            Name = "Piyano",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 10,
                            Url = "piyano-24"
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4066),
                            Description = "Saksafon  alanında gelişim eğitimi",
                            ImageUrl = "saksafon.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(4066),
                            Name = "Saksafon",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 10,
                            Url = "saksafon-25"
                        });
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.LessonCategory", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LessonId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("LessonCategories");

                    b.HasData(
                        new
                        {
                            LessonId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            LessonId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            LessonId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            LessonId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            LessonId = 5,
                            CategoryId = 1
                        },
                        new
                        {
                            LessonId = 6,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonId = 8,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonId = 9,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonId = 10,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonId = 11,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonId = 12,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonId = 13,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonId = 14,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonId = 15,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonId = 16,
                            CategoryId = 4
                        },
                        new
                        {
                            LessonId = 17,
                            CategoryId = 4
                        },
                        new
                        {
                            LessonId = 18,
                            CategoryId = 4
                        },
                        new
                        {
                            LessonId = 19,
                            CategoryId = 4
                        },
                        new
                        {
                            LessonId = 20,
                            CategoryId = 4
                        },
                        new
                        {
                            LessonId = 21,
                            CategoryId = 5
                        },
                        new
                        {
                            LessonId = 22,
                            CategoryId = 5
                        },
                        new
                        {
                            LessonId = 23,
                            CategoryId = 5
                        },
                        new
                        {
                            LessonId = 24,
                            CategoryId = 5
                        },
                        new
                        {
                            LessonId = 25,
                            CategoryId = 5
                        });
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d13cd4a7-18ca-4084-9cda-a32d735a927b",
                            Description = "Yöneticilerin rolü bu.",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2e1658d9-8fff-4ce5-9c9e-8ad51308a829",
                            Description = "Diğer tüm kullanıcıların rolü bu.",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "6b5a9ac5-787a-4e67-961d-7f5a2e1f79fa",
                            Description = "Diğer tüm kullanıcıların rolü bu.",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "27044e04-b191-4154-8f62-29ccd733b583",
                            Description = "Diğer tüm kullanıcıların rolü bu.",
                            Name = "Normal",
                            NormalizedName = "NORMAL"
                        },
                        new
                        {
                            Id = "4db54d14-ced0-4fcd-98a8-98f0c765efb3",
                            Description = "Diğer tüm kullanıcıların rolü bu.",
                            Name = "Strict",
                            NormalizedName = "STRICT"
                        });
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "İstanbul",
                            Country = "Türkiye",
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(9087),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(9093),
                            Name = "Beşiktaş Koleji",
                            Phone = "02122321933",
                            Url = "besiktas-koleji"
                        },
                        new
                        {
                            Id = 2,
                            City = "İstanbul",
                            Country = "Türkiye",
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(9097),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 475, DateTimeKind.Local).AddTicks(9097),
                            Name = "Kartal Akademi",
                            Phone = "02164785696",
                            Url = "kartal-akademi"
                        });
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("BirthOfYear")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAlive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Spor Alanı Öğretmeni",
                            BirthOfYear = 1980,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3962),
                            FirstName = "Hamza",
                            IsActive = true,
                            IsAlive = false,
                            IsDeleted = false,
                            LastName = "Hakan",
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3970),
                            PhotoUrl = "hamza-hakan.jpg",
                            Url = "hamza-hakan-1"
                        },
                        new
                        {
                            Id = 2,
                            About = "Spor Alanı Öğretmeni",
                            BirthOfYear = 1985,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3976),
                            FirstName = "Deniz",
                            IsActive = true,
                            IsAlive = true,
                            IsDeleted = false,
                            LastName = "Keskin",
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3977),
                            PhotoUrl = "deniz-keskin.jpg",
                            Url = "deniz-keskin-2"
                        },
                        new
                        {
                            Id = 3,
                            About = "Sanat Alanı Öğretmeni",
                            BirthOfYear = 1982,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3979),
                            FirstName = "Sedef",
                            IsActive = true,
                            IsAlive = false,
                            IsDeleted = false,
                            LastName = "Arak",
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3980),
                            PhotoUrl = "sedef-arak.jpg",
                            Url = "sedef-arak-3"
                        },
                        new
                        {
                            Id = 4,
                            About = "Sanat Alanı Öğretmeni",
                            BirthOfYear = 1990,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3982),
                            FirstName = "Hakan",
                            IsActive = true,
                            IsAlive = false,
                            IsDeleted = false,
                            LastName = "Tan",
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3983),
                            PhotoUrl = "hakan-tan.jpg",
                            Url = "hakan-tan-4"
                        },
                        new
                        {
                            Id = 5,
                            About = "Sözel Alan Öğretmeni",
                            BirthOfYear = 1982,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3985),
                            FirstName = "Aysun",
                            IsActive = true,
                            IsAlive = true,
                            IsDeleted = false,
                            LastName = "Yılmaz",
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3985),
                            PhotoUrl = "aysun-yilmaz.jpg",
                            Url = "aysun-yilmaz-5"
                        },
                        new
                        {
                            Id = 6,
                            About = "Sözel Alan Öğretmeni",
                            BirthOfYear = 1987,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3989),
                            FirstName = "Mine",
                            IsActive = true,
                            IsAlive = false,
                            IsDeleted = false,
                            LastName = "Kar",
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3989),
                            PhotoUrl = "mine-kar.jpg",
                            Url = "mine-kar-6"
                        },
                        new
                        {
                            Id = 7,
                            About = "Sayısal Alan Öğretmeni ",
                            BirthOfYear = 1975,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3991),
                            FirstName = "Mehmet",
                            IsActive = true,
                            IsAlive = false,
                            IsDeleted = false,
                            LastName = "Dar",
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3992),
                            PhotoUrl = "mehmet-dar.jpg",
                            Url = "mehmet-dar-7"
                        },
                        new
                        {
                            Id = 8,
                            About = "Sayısal Alan Öğretmeni ",
                            BirthOfYear = 1980,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3993),
                            FirstName = "Osman",
                            IsActive = true,
                            IsAlive = false,
                            IsDeleted = false,
                            LastName = "Hak",
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3994),
                            PhotoUrl = "osman-hak.jpg",
                            Url = "osman-hak-8"
                        },
                        new
                        {
                            Id = 9,
                            About = "Enstürman Alanı Öğretmeni",
                            BirthOfYear = 1982,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3996),
                            FirstName = "Kayahan",
                            IsActive = true,
                            IsAlive = true,
                            IsDeleted = false,
                            LastName = "Keten",
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3996),
                            PhotoUrl = "kayahan-keten.jpg",
                            Url = "kayahan-keten-9"
                        },
                        new
                        {
                            Id = 10,
                            About = " Enstürman Alanı Öğretmeni ",
                            BirthOfYear = 1992,
                            CreatedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3998),
                            FirstName = "Ela",
                            IsActive = true,
                            IsAlive = false,
                            IsDeleted = false,
                            LastName = "Kara",
                            ModifiedDate = new DateTime(2023, 7, 30, 0, 33, 38, 476, DateTimeKind.Local).AddTicks(3999),
                            PhotoUrl = "ela-kara.jpg",
                            Url = "ela-kara-10"
                        });
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f4bed8c0-18e8-4ca6-802b-28e699fc01fc",
                            AccessFailedCount = 0,
                            Address = "Hürriyet Mh. Doktor Cemil Bnegü Caddesi No:88 D:10 Kağıthane",
                            City = "İstanbul",
                            ConcurrencyStamp = "e9a2714e-04d0-4031-8a44-4e56b32d9b6d",
                            DateOfBirth = new DateTime(1994, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "erenlersen1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Eren",
                            Gender = "Erkek",
                            LastName = "Şen",
                            LockoutEnabled = true,
                            Name = " ",
                            NormalizedEmail = "ERENLERSEN1@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOIqFThhAmxBtUqwsscxY43su43jYfGvaG3cfcoGuMTrdJNFmFtIZF84QZ9mt8p95w==",
                            PhoneNumber = "+905335219128",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "d64545e2-8acd-4b2f-adf2-20da519eca19",
                            AccessFailedCount = 0,
                            Address = "Hürriyet Mh. Doktor Cemil Bnegü Caddesi No:88 D:10 Kağıthane",
                            City = "İstanbul",
                            ConcurrencyStamp = "e6cb2b15-b11e-48b4-b56c-06aa4bc59709",
                            DateOfBirth = new DateTime(1983, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elanursen@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Elanur",
                            Gender = "Kadın",
                            LastName = "Şen",
                            LockoutEnabled = true,
                            Name = " ",
                            NormalizedEmail = "ELANURSEN@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAECLbgEq/6TLWN/kQoHor1D+n2KKUEfQO6MiSGTxJeIenoxnhmQmjwgXiwVlnAM/BJA==",
                            PhoneNumber = "+905379249326",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f4bed8c0-18e8-4ca6-802b-28e699fc01fc",
                            RoleId = "d13cd4a7-18ca-4084-9cda-a32d735a927b"
                        },
                        new
                        {
                            UserId = "d64545e2-8acd-4b2f-adf2-20da519eca19",
                            RoleId = "2e1658d9-8fff-4ce5-9c9e-8ad51308a829"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Cart", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonWorld.Entity.Concrete.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Lesson", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.School", "School")
                        .WithMany("Lessons")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LessonWorld.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.LessonCategory", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.Category", "Category")
                        .WithMany("LessonCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonWorld.Entity.Concrete.Lesson", "Lesson")
                        .WithMany("LessonCategories")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Order", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonWorld.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonWorld.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Category", b =>
                {
                    b.Navigation("LessonCategories");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Lesson", b =>
                {
                    b.Navigation("LessonCategories");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.School", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
