// <auto-generated />
using System;
using LessonWorld.Data.Concrete.EfCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LessonWorld.Data.Migrations
{
    [DbContext(typeof(LessonWorldContext))]
    [Migration("20230805180901_DataDb")]
    partial class DataDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 757, DateTimeKind.Local).AddTicks(8280),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 757, DateTimeKind.Local).AddTicks(8295),
                            UserId = "31d99b2d-ca81-4268-8adc-b91589236a65"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 757, DateTimeKind.Local).AddTicks(8330),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 757, DateTimeKind.Local).AddTicks(8331),
                            UserId = "ca1a2118-327a-4685-af77-1b8c46c64b2d"
                        });
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("LessonId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 758, DateTimeKind.Local).AddTicks(7803),
                            Description = "Spor Dersleri Basketbol,Futbol,Volaybol,Yüzme,Koşu",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 758, DateTimeKind.Local).AddTicks(7815),
                            Name = "Spor",
                            Url = "spor-dersleri"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 758, DateTimeKind.Local).AddTicks(7819),
                            Description = "Sanat Derleri,Heykel Traş,Resim,Mozaik,Seramik,Temel Tasarım",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 758, DateTimeKind.Local).AddTicks(7820),
                            Name = "Sanat",
                            Url = "sanat-dersleri"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 758, DateTimeKind.Local).AddTicks(7822),
                            Description = "Sözel Dersler Türkçe,Tarih,Felsefe,Edebiyat,Dil Anlatım",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 758, DateTimeKind.Local).AddTicks(7822),
                            Name = "Sözel",
                            Url = "sozel-dersleri"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 758, DateTimeKind.Local).AddTicks(7824),
                            Description = "Sayısal Dersler Matematik,Fizik,Kimya Biyoloji,Geometri",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 758, DateTimeKind.Local).AddTicks(7824),
                            Name = "Sayısal",
                            Url = "sayisal-dersleri"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 758, DateTimeKind.Local).AddTicks(7825),
                            Description = "Enstürman Dersleri Gitar,Keman,Saz,Piyano,Saksafon",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 758, DateTimeKind.Local).AddTicks(7826),
                            Name = "Enstürman",
                            Url = "enstürman-dersleri"
                        });
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonTime")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6035),
                            Description = "Basketbol  alanında gelişim eğitimi",
                            ImageUrl = "basketbol.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6052),
                            Name = "Basketbol",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 1,
                            Url = "basketbol-1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6060),
                            Description = "Futbol  alanında gelişim eğitimi",
                            ImageUrl = "futbol.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6061),
                            Name = "Futbol",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 2,
                            Url = "Futbol-2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6064),
                            Description = "Voleybol  alanında gelişim eğitimi",
                            ImageUrl = "voleybol.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6064),
                            Name = "Voleybol",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 1,
                            Url = "voleybol-3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6066),
                            Description = "Yüzme  alanında gelişim eğitimi",
                            ImageUrl = "yuzme.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6067),
                            Name = "Yüzme",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 2,
                            Url = "yuzme-4"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6070),
                            Description = "Koşu alanında gelişim eğitimi",
                            ImageUrl = "kosu.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6071),
                            Name = "Koşu",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 1,
                            Url = "kosu-5"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6073),
                            Description = "Heykel Traş  alanında gelişim eğitimi",
                            ImageUrl = "tras.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6075),
                            Name = "Heykel Traş",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 3,
                            Url = "tras-6"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6077),
                            Description = "Resim  alanında gelişim eğitimi",
                            ImageUrl = "resim.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6078),
                            Name = "Resim",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 3,
                            Url = "resim-7"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6080),
                            Description = "Temel Tasarım  alanında gelişim eğitimi",
                            ImageUrl = "tras.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6098),
                            Name = "Temel Tasarım",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 3,
                            Url = "temel-tasarım-8"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6120),
                            Description = "Mozaik  alanında gelişim eğitimi",
                            ImageUrl = "mozaik.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6121),
                            Name = "Mozaik",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 4,
                            Url = "mozaik-9"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6125),
                            Description = "Seramik  alanında gelişim eğitimi",
                            ImageUrl = "seramik.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6125),
                            Name = "Seramik",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 4,
                            Url = "seramik-10"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6127),
                            Description = "Türkçe  alanında gelişim eğitimi",
                            ImageUrl = "turkce.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6128),
                            Name = "Türkçe",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 5,
                            Url = "turkce-11"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6130),
                            Description = "Edebiyat  alanında gelişim eğitimi",
                            ImageUrl = "edebiyat.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6131),
                            Name = "Edebiyat",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 5,
                            Url = "edebiyat-12"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6133),
                            Description = "Dil Anlatım  alanında gelişim eğitimi",
                            ImageUrl = "dil-anlatim.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6133),
                            Name = "Dil Anlatım",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 5,
                            Url = "dil-analatim-13"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6136),
                            Description = "Tarih alanında gelişim eğitimi",
                            ImageUrl = "tarih.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6137),
                            Name = "Tarih",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 6,
                            Url = "tarih-14"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6140),
                            Description = "Felsefe  alanında gelişim eğitimi",
                            ImageUrl = "felsefe.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6141),
                            Name = "Felsefe",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 6,
                            Url = "felsefe-15"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6144),
                            Description = "Matematik  alanında gelişim eğitimi",
                            ImageUrl = "matematik.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6145),
                            Name = "Matematik",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 7,
                            Url = "matematik-16"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6147),
                            Description = "Geometri  alanında gelişim eğitimi",
                            ImageUrl = "geometri.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6148),
                            Name = "Geometri",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 7,
                            Url = "geometri-17"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6150),
                            Description = "Fizik  alanında gelişim eğitimi",
                            ImageUrl = "fizik.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6152),
                            Name = "Fizik",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 7,
                            Url = "fizik-18"
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6154),
                            Description = "Kimya  alanında gelişim eğitimi",
                            ImageUrl = "kimya.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6154),
                            Name = "Kimya",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 8,
                            Url = "kimya-19"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6157),
                            Description = "Biyoloji  alanında gelişim eğitimi",
                            ImageUrl = "Biyoloji.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6157),
                            Name = "Biyoloji",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 8,
                            Url = "biyoloji-20"
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6159),
                            Description = "Geometri  alanında gelişim eğitimi",
                            ImageUrl = "gitar.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6160),
                            Name = "Gitar",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 9,
                            Url = "gitar-21"
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6162),
                            Description = "Saz  alanında gelişim eğitimi",
                            ImageUrl = "saz.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6162),
                            Name = "Saz",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 9,
                            Url = "saz-22"
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6164),
                            Description = "Keman  alanında gelişim eğitimi",
                            ImageUrl = "keman.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6165),
                            Name = "Keman",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 9,
                            Url = "keman-23"
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6167),
                            Description = "Piyano  alanında gelişim eğitimi",
                            ImageUrl = "piyano.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6167),
                            Name = "Piyano",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 10,
                            Url = "piyano-24"
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6170),
                            Description = "Saksafon  alanında gelişim eğitimi",
                            ImageUrl = "saksafon.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            LessonTime = 0,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 760, DateTimeKind.Local).AddTicks(6171),
                            Name = "Saksafon",
                            Price = 100m,
                            SchoolId = 1,
                            TeacherId = 10,
                            Url = "saksafon-25"
                        });
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.LessonCategory", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LessonId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("LessonCategories");

                    b.HasData(
                        new
                        {
                            LessonId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            LessonId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            LessonId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            LessonId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            LessonId = 5,
                            CategoryId = 1
                        },
                        new
                        {
                            LessonId = 6,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonId = 8,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonId = 9,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonId = 10,
                            CategoryId = 2
                        },
                        new
                        {
                            LessonId = 11,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonId = 12,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonId = 13,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonId = 14,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonId = 15,
                            CategoryId = 3
                        },
                        new
                        {
                            LessonId = 16,
                            CategoryId = 4
                        },
                        new
                        {
                            LessonId = 17,
                            CategoryId = 4
                        },
                        new
                        {
                            LessonId = 18,
                            CategoryId = 4
                        },
                        new
                        {
                            LessonId = 19,
                            CategoryId = 4
                        },
                        new
                        {
                            LessonId = 20,
                            CategoryId = 4
                        },
                        new
                        {
                            LessonId = 21,
                            CategoryId = 5
                        },
                        new
                        {
                            LessonId = 22,
                            CategoryId = 5
                        },
                        new
                        {
                            LessonId = 23,
                            CategoryId = 5
                        },
                        new
                        {
                            LessonId = 24,
                            CategoryId = 5
                        },
                        new
                        {
                            LessonId = 25,
                            CategoryId = 5
                        });
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "aa757301-57dd-4866-86f5-1a6489164fa3",
                            Description = "Yöneticilerin rolü bu.",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7d353eb6-24ff-4a0e-b9e5-467fd390a007",
                            Description = "Diğer tüm kullanıcıların rolü bu.",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "d0506d2d-d31d-4a83-94f9-5b9e3097c9c6",
                            Description = "Superviser kullanıcıların rolü bu.",
                            Name = "Superviser",
                            NormalizedName = "SUPERVİSER"
                        },
                        new
                        {
                            Id = "163c71ce-bdd2-4cd8-a250-4fedad2c817f",
                            Description = "Student kullanıcıların rolü bu.",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "İstanbul",
                            Country = "Türkiye",
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(2438),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(2445),
                            Name = "Beşiktaş Koleji",
                            Phone = "02122321933",
                            Url = "besiktas-koleji"
                        },
                        new
                        {
                            Id = 2,
                            City = "İstanbul",
                            Country = "Türkiye",
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(2449),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(2450),
                            Name = "Kartal Akademi",
                            Phone = "02164785696",
                            Url = "kartal-akademi"
                        });
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("BirthOfYear")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAlive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Spor Alanı Öğretmeni",
                            BirthOfYear = 1980,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7730),
                            FirstName = "Hamza",
                            IsActive = true,
                            IsAlive = false,
                            IsDeleted = false,
                            LastName = "Hakan",
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7739),
                            PhotoUrl = "hamza-hakan.jpg",
                            Url = "hamza-hakan-1"
                        },
                        new
                        {
                            Id = 2,
                            About = "Spor Alanı Öğretmeni",
                            BirthOfYear = 1985,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7747),
                            FirstName = "Deniz",
                            IsActive = true,
                            IsAlive = true,
                            IsDeleted = false,
                            LastName = "Keskin",
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7748),
                            PhotoUrl = "deniz-keskin.jpg",
                            Url = "deniz-keskin-2"
                        },
                        new
                        {
                            Id = 3,
                            About = "Sanat Alanı Öğretmeni",
                            BirthOfYear = 1982,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7750),
                            FirstName = "Sedef",
                            IsActive = true,
                            IsAlive = false,
                            IsDeleted = false,
                            LastName = "Arak",
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7751),
                            PhotoUrl = "sedef-arak.jpg",
                            Url = "sedef-arak-3"
                        },
                        new
                        {
                            Id = 4,
                            About = "Sanat Alanı Öğretmeni",
                            BirthOfYear = 1990,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7753),
                            FirstName = "Hakan",
                            IsActive = true,
                            IsAlive = false,
                            IsDeleted = false,
                            LastName = "Tan",
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7754),
                            PhotoUrl = "hakan-tan.jpg",
                            Url = "hakan-tan-4"
                        },
                        new
                        {
                            Id = 5,
                            About = "Sözel Alan Öğretmeni",
                            BirthOfYear = 1982,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7756),
                            FirstName = "Aysun",
                            IsActive = true,
                            IsAlive = true,
                            IsDeleted = false,
                            LastName = "Yılmaz",
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7756),
                            PhotoUrl = "aysun-yilmaz.jpg",
                            Url = "aysun-yilmaz-5"
                        },
                        new
                        {
                            Id = 6,
                            About = "Sözel Alan Öğretmeni",
                            BirthOfYear = 1987,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7758),
                            FirstName = "Mine",
                            IsActive = true,
                            IsAlive = false,
                            IsDeleted = false,
                            LastName = "Kar",
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7759),
                            PhotoUrl = "mine-kar.jpg",
                            Url = "mine-kar-6"
                        },
                        new
                        {
                            Id = 7,
                            About = "Sayısal Alan Öğretmeni ",
                            BirthOfYear = 1975,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7761),
                            FirstName = "Mehmet",
                            IsActive = true,
                            IsAlive = false,
                            IsDeleted = false,
                            LastName = "Dar",
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7762),
                            PhotoUrl = "mehmet-dar.jpg",
                            Url = "mehmet-dar-7"
                        },
                        new
                        {
                            Id = 8,
                            About = "Sayısal Alan Öğretmeni ",
                            BirthOfYear = 1980,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7764),
                            FirstName = "Osman",
                            IsActive = true,
                            IsAlive = false,
                            IsDeleted = false,
                            LastName = "Hak",
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7765),
                            PhotoUrl = "osman-hak.jpg",
                            Url = "osman-hak-8"
                        },
                        new
                        {
                            Id = 9,
                            About = "Enstürman Alanı Öğretmeni",
                            BirthOfYear = 1982,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7767),
                            FirstName = "Kayahan",
                            IsActive = true,
                            IsAlive = true,
                            IsDeleted = false,
                            LastName = "Keten",
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7768),
                            PhotoUrl = "kayahan-keten.jpg",
                            Url = "kayahan-keten-9"
                        },
                        new
                        {
                            Id = 10,
                            About = " Enstürman Alanı Öğretmeni ",
                            BirthOfYear = 1992,
                            CreatedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7770),
                            FirstName = "Ela",
                            IsActive = true,
                            IsAlive = false,
                            IsDeleted = false,
                            LastName = "Kara",
                            ModifiedDate = new DateTime(2023, 8, 5, 21, 9, 0, 761, DateTimeKind.Local).AddTicks(7770),
                            PhotoUrl = "ela-kara.jpg",
                            Url = "ela-kara-10"
                        });
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "31d99b2d-ca81-4268-8adc-b91589236a65",
                            AccessFailedCount = 0,
                            Address = "Hürriyet Mh. Doktor Cemil Bnegü Caddesi No:88 D:10 Kağıthane",
                            City = "İstanbul",
                            ConcurrencyStamp = "a7f7f784-4bf2-4363-be66-7a66e86cbfd2",
                            DateOfBirth = new DateTime(1994, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "erenlersen1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Eren",
                            Gender = "Erkek",
                            LastName = "Şen",
                            LockoutEnabled = true,
                            Name = " ",
                            NormalizedEmail = "ERENLERSEN1@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMQhuG89sOFjF+Ogg+oN3jkqnBgrBzikda6MXhrgUgVWh6H5mwbjUzZqwd+bSgg+zQ==",
                            PhoneNumber = "+905335219128",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "ca1a2118-327a-4685-af77-1b8c46c64b2d",
                            AccessFailedCount = 0,
                            Address = "Hürriyet Mh. Doktor Cemil Bnegü Caddesi No:88 D:10 Kağıthane",
                            City = "İstanbul",
                            ConcurrencyStamp = "ff766cf4-b119-4eef-8e0e-f19ede7999f5",
                            DateOfBirth = new DateTime(1983, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elanursen@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Elanur",
                            Gender = "Kadın",
                            LastName = "Şen",
                            LockoutEnabled = true,
                            Name = " ",
                            NormalizedEmail = "ELANURSEN@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEGslafFPn4iJf4cgZlxqSEOoutUd95IcsQONRwBjpn7wuwqqJyAEZvC4EmPq6jXt2Q==",
                            PhoneNumber = "+905379249326",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "31d99b2d-ca81-4268-8adc-b91589236a65",
                            RoleId = "aa757301-57dd-4866-86f5-1a6489164fa3"
                        },
                        new
                        {
                            UserId = "ca1a2118-327a-4685-af77-1b8c46c64b2d",
                            RoleId = "7d353eb6-24ff-4a0e-b9e5-467fd390a007"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Cart", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonWorld.Entity.Concrete.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Lesson", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.School", "School")
                        .WithMany("Lessons")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LessonWorld.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.LessonCategory", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.Category", "Category")
                        .WithMany("LessonCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonWorld.Entity.Concrete.Lesson", "Lesson")
                        .WithMany("LessonCategories")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Order", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonWorld.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.School", null)
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonWorld.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LessonWorld.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Category", b =>
                {
                    b.Navigation("LessonCategories");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Lesson", b =>
                {
                    b.Navigation("LessonCategories");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.School", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("LessonWorld.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
